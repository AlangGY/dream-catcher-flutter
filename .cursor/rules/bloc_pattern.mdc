---
description: 
globs: *_bloc.dart
alwaysApply: false
---
# BLoC 패턴 가이드

Dream Catcher 앱은 상태 관리를 위해 BLoC(Business Logic Component) 패턴을 사용합니다.

## BLoC 구조

각 BLoC는 다음 세 가지 주요 컴포넌트로 구성됩니다:

1. **Event** - UI에서 트리거되는 이벤트
   - 모든 이벤트는 `Equatable`을 상속받아 동등성 비교를 용이하게 합니다.
   - 이벤트는 사용자 동작이나 시스템 이벤트에 응답하여 생성됩니다.

2. **State** - UI가 반응하는 상태
   - 모든 상태는 `Equatable`을 상속받습니다.
   - 상태는 불변(immutable)이어야 합니다.
   - 상태는 UI가 렌더링해야 할 데이터를 포함합니다.

3. **BLoC** - 이벤트를 상태로 변환하는 비즈니스 로직
   - 모든 BLoC는 `Bloc<Event, State>` 클래스를 상속받습니다.
   - BLoC는 UseCase를 호출하여 도메인 로직을 실행합니다.
   - BLoC는 도메인 레이어와 프레젠테이션 레이어 사이의 중개자 역할을 합니다.

## 중요한 패턴

1. **상태 전환**
   ```dart
   on<SomeEvent>((event, emit) async {
     // 이벤트 처리 로직
     emit(NewState(...));
   });
   ```

2. **오류 처리**
   ```dart
   try {
     // 비즈니스 로직 실행
   } catch (e) {
     emit(ErrorState(message: e.toString()));
   }
   ```

3. **상태 흐름 테스트**
   ```dart
   blocTest<MyBloc, MyState>(
     'description',
     build: () => MyBloc(),
     act: (bloc) => bloc.add(MyEvent()),
     expect: () => [isA<LoadingState>(), isA<LoadedState>()],
   );
   ```

## 예시 BLoC

[dream_interview_bloc.dart](mdc:lib/features/dream/presentation/bloc/dream_interview_bloc.dart)는 구현된 BLoC의 좋은 예시입니다. 이 파일을 참조하여 새로운 BLoC를 구현하는 데 도움을 받으세요.
