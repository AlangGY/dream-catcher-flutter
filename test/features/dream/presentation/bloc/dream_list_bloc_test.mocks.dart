// Mocks generated by Mockito 5.4.4 from annotations
// in dream_catcher/test/features/dream/presentation/bloc/dream_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:dream_catcher/core/error/failure.dart' as _i6;
import 'package:dream_catcher/features/dream/domain/entities/dream_list.dart'
    as _i7;
import 'package:dream_catcher/features/dream/domain/repositories/dream_repository.dart'
    as _i2;
import 'package:dream_catcher/features/dream/domain/use-cases/delete_dream.dart'
    as _i10;
import 'package:dream_catcher/features/dream/domain/use-cases/filter_dreams_by_date.dart'
    as _i13;
import 'package:dream_catcher/features/dream/domain/use-cases/filter_dreams_by_mood.dart'
    as _i12;
import 'package:dream_catcher/features/dream/domain/use-cases/get_dreams.dart'
    as _i4;
import 'package:dream_catcher/features/dream/domain/use-cases/save_dream.dart'
    as _i8;
import 'package:dream_catcher/features/dream/domain/use-cases/search_dreams.dart'
    as _i11;
import 'package:dream_catcher/features/dream/domain/use-cases/update_dream.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDreamRepository_0 extends _i1.SmartFake
    implements _i2.DreamRepository {
  _FakeDreamRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetDreams].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDreams extends _i1.Mock implements _i4.GetDreams {
  @override
  _i2.DreamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.DreamRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>.value(
            _FakeEither_1<_i6.Failure, _i7.DreamList>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>.value(
                _FakeEither_1<_i6.Failure, _i7.DreamList>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>);
}

/// A class which mocks [SaveDream].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveDream extends _i1.Mock implements _i8.SaveDream {
  @override
  _i2.DreamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.DreamRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(
          _i8.SaveDreamParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
                _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}

/// A class which mocks [UpdateDream].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateDream extends _i1.Mock implements _i9.UpdateDream {
  @override
  _i2.DreamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.DreamRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(
          _i9.UpdateDreamParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
                _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}

/// A class which mocks [DeleteDream].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteDream extends _i1.Mock implements _i10.DeleteDream {
  @override
  _i2.DreamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.DreamRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(
          _i10.DeleteDreamParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
                _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}

/// A class which mocks [SearchDreams].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchDreams extends _i1.Mock implements _i11.SearchDreams {
  @override
  _i2.DreamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.DreamRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>> call(
          _i11.SearchDreamsParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>.value(
            _FakeEither_1<_i6.Failure, _i7.DreamList>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>.value(
                _FakeEither_1<_i6.Failure, _i7.DreamList>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>);
}

/// A class which mocks [FilterDreamsByMood].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilterDreamsByMood extends _i1.Mock
    implements _i12.FilterDreamsByMood {
  @override
  _i2.DreamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.DreamRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>> call(
          _i12.FilterDreamsByMoodParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>.value(
            _FakeEither_1<_i6.Failure, _i7.DreamList>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>.value(
                _FakeEither_1<_i6.Failure, _i7.DreamList>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>);
}

/// A class which mocks [FilterDreamsByDate].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilterDreamsByDate extends _i1.Mock
    implements _i13.FilterDreamsByDate {
  @override
  _i2.DreamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeDreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.DreamRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>> call(
          _i13.FilterDreamsByDateParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>.value(
            _FakeEither_1<_i6.Failure, _i7.DreamList>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>.value(
                _FakeEither_1<_i6.Failure, _i7.DreamList>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.DreamList>>);
}
