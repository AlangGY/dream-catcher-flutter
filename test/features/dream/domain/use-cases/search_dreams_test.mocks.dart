// Mocks generated by Mockito 5.4.4 from annotations
// in dream_catcher/test/features/dream/domain/use-cases/search_dreams_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:dream_catcher/core/error/failure.dart' as _i5;
import 'package:dream_catcher/features/dream/domain/entities/dream_detail.dart'
    as _i7;
import 'package:dream_catcher/features/dream/domain/entities/dream_list.dart'
    as _i6;
import 'package:dream_catcher/features/dream/domain/repositories/dream_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DreamRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDreamRepository extends _i1.Mock implements _i3.DreamRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>> getDreams() =>
      (super.noSuchMethod(
        Invocation.method(
          #getDreams,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>.value(
            _FakeEither_0<_i5.Failure, _i6.DreamList>(
          this,
          Invocation.method(
            #getDreams,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>.value(
                _FakeEither_0<_i5.Failure, _i6.DreamList>(
          this,
          Invocation.method(
            #getDreams,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> saveDream(
          _i7.DreamDetail? dream) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveDream,
          [dream],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #saveDream,
            [dream],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #saveDream,
            [dream],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> updateDream(
          _i7.DreamDetail? dream) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDream,
          [dream],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateDream,
            [dream],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateDream,
            [dream],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteDream(String? dreamId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDream,
          [dreamId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteDream,
            [dreamId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteDream,
            [dreamId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>> searchDreams(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchDreams,
          [query],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>.value(
            _FakeEither_0<_i5.Failure, _i6.DreamList>(
          this,
          Invocation.method(
            #searchDreams,
            [query],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>.value(
                _FakeEither_0<_i5.Failure, _i6.DreamList>(
          this,
          Invocation.method(
            #searchDreams,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>> filterDreamsByMood(
          String? mood) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterDreamsByMood,
          [mood],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>.value(
            _FakeEither_0<_i5.Failure, _i6.DreamList>(
          this,
          Invocation.method(
            #filterDreamsByMood,
            [mood],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>.value(
                _FakeEither_0<_i5.Failure, _i6.DreamList>(
          this,
          Invocation.method(
            #filterDreamsByMood,
            [mood],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>> filterDreamsByDate(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterDreamsByDate,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>.value(
            _FakeEither_0<_i5.Failure, _i6.DreamList>(
          this,
          Invocation.method(
            #filterDreamsByDate,
            [
              startDate,
              endDate,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>.value(
                _FakeEither_0<_i5.Failure, _i6.DreamList>(
          this,
          Invocation.method(
            #filterDreamsByDate,
            [
              startDate,
              endDate,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.DreamList>>);
}
